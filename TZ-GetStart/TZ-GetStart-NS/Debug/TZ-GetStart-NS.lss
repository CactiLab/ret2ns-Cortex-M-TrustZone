
TZ-GetStart-NS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20002000  00008374  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  20002018  0000838c  00012018  2**2
                  ALLOC
  3 .heap         00000204  2000203c  000083b0  00012018  2**0
                  ALLOC
  4 .stack        00000400  20002240  000085b4  00012018  2**0
                  ALLOC
  5 .ARM.attributes 0000002c  00000000  00000000  00012018  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00012044  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000abc  00000000  00000000  0001209d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000402  00000000  00000000  00012b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000220  00000000  00000000  00012f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000d0  00000000  00000000  0001317b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0001324b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000150db  00000000  00000000  000132cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003014  00000000  00000000  000283a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000803db  00000000  00000000  0002b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000001c4  00000000  00000000  000ab798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	40 26 00 20 75 81 00 00 0b 82 00 00 0b 82 00 00     @&. u...........
	...
    802c:	9f 82 00 00 00 00 00 00 00 00 00 00 0b 82 00 00     ................
    803c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    804c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    805c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    806c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    807c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    808c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    809c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80ac:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80bc:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80cc:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80dc:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80ec:	0b 82 00 00 0b 82 00 00                             ........

000080f4 <__do_global_dtors_aux>:
    80f4:	b510      	push	{r4, lr}
    80f6:	f242 0418 	movw	r4, #8216	; 0x2018
    80fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
    80fe:	7823      	ldrb	r3, [r4, #0]
    8100:	b963      	cbnz	r3, 811c <__do_global_dtors_aux+0x28>
    8102:	f240 0300 	movw	r3, #0
    8106:	f2c0 0300 	movt	r3, #0
    810a:	b12b      	cbz	r3, 8118 <__do_global_dtors_aux+0x24>
    810c:	f248 3074 	movw	r0, #33652	; 0x8374
    8110:	f2c0 0000 	movt	r0, #0
    8114:	e000      	b.n	8118 <__do_global_dtors_aux+0x24>
    8116:	bf00      	nop
    8118:	2301      	movs	r3, #1
    811a:	7023      	strb	r3, [r4, #0]
    811c:	bd10      	pop	{r4, pc}
    811e:	46c0      	nop			; (mov r8, r8)

00008120 <frame_dummy>:
    8120:	f240 0300 	movw	r3, #0
    8124:	f2c0 0300 	movt	r3, #0
    8128:	b510      	push	{r4, lr}
    812a:	b14b      	cbz	r3, 8140 <frame_dummy+0x20>
    812c:	f242 011c 	movw	r1, #8220	; 0x201c
    8130:	f248 3074 	movw	r0, #33652	; 0x8374
    8134:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8138:	f2c0 0000 	movt	r0, #0
    813c:	e000      	b.n	8140 <frame_dummy+0x20>
    813e:	bf00      	nop
    8140:	f248 3074 	movw	r0, #33652	; 0x8374
    8144:	f2c0 0000 	movt	r0, #0
    8148:	6803      	ldr	r3, [r0, #0]
    814a:	b903      	cbnz	r3, 814e <frame_dummy+0x2e>
    814c:	bd10      	pop	{r4, pc}
    814e:	f240 0300 	movw	r3, #0
    8152:	f2c0 0300 	movt	r3, #0
    8156:	2b00      	cmp	r3, #0
    8158:	d0f8      	beq.n	814c <frame_dummy+0x2c>
    815a:	4798      	blx	r3
    815c:	e7f6      	b.n	814c <frame_dummy+0x2c>
    815e:	46c0      	nop			; (mov r8, r8)

00008160 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    8160:	b580      	push	{r7, lr}
    8162:	af00      	add	r7, sp, #0
	system_init();
    8164:	f248 2311 	movw	r3, #33297	; 0x8211
    8168:	f2c0 0300 	movt	r3, #0
    816c:	4798      	blx	r3
}
    816e:	46c0      	nop			; (mov r8, r8)
    8170:	46bd      	mov	sp, r7
    8172:	bd80      	pop	{r7, pc}

00008174 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8174:	b580      	push	{r7, lr}
    8176:	b082      	sub	sp, #8
    8178:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    817a:	f248 3374 	movw	r3, #33652	; 0x8374
    817e:	f2c0 0300 	movt	r3, #0
    8182:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8184:	f242 0300 	movw	r3, #8192	; 0x2000
    8188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    818e:	687a      	ldr	r2, [r7, #4]
    8190:	683b      	ldr	r3, [r7, #0]
    8192:	429a      	cmp	r2, r3
    8194:	d00f      	beq.n	81b6 <Reset_Handler+0x42>
                for (; pDest < &_erelocate;) {
    8196:	e007      	b.n	81a8 <Reset_Handler+0x34>
                        *pDest++ = *pSrc++;
    8198:	683b      	ldr	r3, [r7, #0]
    819a:	1d1a      	adds	r2, r3, #4
    819c:	603a      	str	r2, [r7, #0]
    819e:	687a      	ldr	r2, [r7, #4]
    81a0:	1d11      	adds	r1, r2, #4
    81a2:	6079      	str	r1, [r7, #4]
    81a4:	6812      	ldr	r2, [r2, #0]
    81a6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    81a8:	683a      	ldr	r2, [r7, #0]
    81aa:	f242 0318 	movw	r3, #8216	; 0x2018
    81ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b2:	429a      	cmp	r2, r3
    81b4:	d3f0      	bcc.n	8198 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    81b6:	f242 0318 	movw	r3, #8216	; 0x2018
    81ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81be:	603b      	str	r3, [r7, #0]
    81c0:	e004      	b.n	81cc <Reset_Handler+0x58>
                *pDest++ = 0;
    81c2:	683b      	ldr	r3, [r7, #0]
    81c4:	1d1a      	adds	r2, r3, #4
    81c6:	603a      	str	r2, [r7, #0]
    81c8:	2200      	movs	r2, #0
    81ca:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    81cc:	683a      	ldr	r2, [r7, #0]
    81ce:	f242 033c 	movw	r3, #8252	; 0x203c
    81d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d6:	429a      	cmp	r2, r3
    81d8:	d3f3      	bcc.n	81c2 <Reset_Handler+0x4e>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    81da:	f248 0300 	movw	r3, #32768	; 0x8000
    81de:	f2c0 0300 	movt	r3, #0
    81e2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    81e4:	f64e 5300 	movw	r3, #60672	; 0xed00
    81e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    81ec:	687a      	ldr	r2, [r7, #4]
    81ee:	217f      	movs	r1, #127	; 0x7f
    81f0:	438a      	bics	r2, r1
    81f2:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    81f4:	f248 3305 	movw	r3, #33541	; 0x8305
    81f8:	f2c0 0300 	movt	r3, #0
    81fc:	4798      	blx	r3

        /* Branch to main function */
        main();
    81fe:	f248 231b 	movw	r3, #33307	; 0x821b
    8202:	f2c0 0300 	movt	r3, #0
    8206:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8208:	e7fe      	b.n	8208 <Reset_Handler+0x94>

0000820a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    820a:	b580      	push	{r7, lr}
    820c:	af00      	add	r7, sp, #0
        while (1) {
    820e:	e7fe      	b.n	820e <Dummy_Handler+0x4>

00008210 <system_init>:
	return 0;
}
#endif

void system_init(void)
{
    8210:	b580      	push	{r7, lr}
    8212:	af00      	add	r7, sp, #0
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif
}
    8214:	46c0      	nop			; (mov r8, r8)
    8216:	46bd      	mov	sp, r7
    8218:	bd80      	pop	{r7, pc}

0000821a <main>:

volatile int gs_val[2];

/* Non-secure main() */
int main(void)
{
    821a:	b580      	push	{r7, lr}
    821c:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    821e:	f248 1361 	movw	r3, #33121	; 0x8161
    8222:	f2c0 0300 	movt	r3, #0
    8226:	4798      	blx	r3
	
	ret2nw_ns();
    8228:	f248 23e1 	movw	r3, #33505	; 0x82e1
    822c:	f2c0 0300 	movt	r3, #0
    8230:	4798      	blx	r3
	
	/* Call non-secure callable function 1 */
	gs_val[0] = nsc_func_plus3(1);
    8232:	2001      	movs	r0, #1
    8234:	f647 4301 	movw	r3, #31745	; 0x7c01
    8238:	f2c0 0300 	movt	r3, #0
    823c:	4798      	blx	r3
    823e:	0002      	movs	r2, r0
    8240:	f242 0334 	movw	r3, #8244	; 0x2034
    8244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8248:	601a      	str	r2, [r3, #0]

	/* Call non-secure callable function 2 */
	gs_val[1] = nsc_func_minus2(7);
    824a:	2007      	movs	r0, #7
    824c:	f647 4309 	movw	r3, #31753	; 0x7c09
    8250:	f2c0 0300 	movt	r3, #0
    8254:	4798      	blx	r3
    8256:	0002      	movs	r2, r0
    8258:	f242 0334 	movw	r3, #8244	; 0x2034
    825c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8260:	605a      	str	r2, [r3, #4]

	/* Replace with your application code */
	while (1) {
		__NOP();
    8262:	46c0      	nop			; (mov r8, r8)
    8264:	e7fd      	b.n	8262 <main+0x48>

00008266 <SVC_Handler_Main>:
char user_input[] = "AAAA Hello World (ns)\r\n";

void print_in_s_handler(char* content);

void SVC_Handler_Main(unsigned int *svc_args)
{
    8266:	b580      	push	{r7, lr}
    8268:	b084      	sub	sp, #16
    826a:	af00      	add	r7, sp, #0
    826c:	6078      	str	r0, [r7, #4]
	uint32_t svc_number = 1;
    826e:	2301      	movs	r3, #1
    8270:	60fb      	str	r3, [r7, #12]
	// stack contains: r0, r1, r2, r3, r12, r14, the return address and xPSR
	svc_number = ((char *)svc_args[6])[-2];
    8272:	687b      	ldr	r3, [r7, #4]
    8274:	3318      	adds	r3, #24
    8276:	681b      	ldr	r3, [r3, #0]
    8278:	3b02      	subs	r3, #2
    827a:	781b      	ldrb	r3, [r3, #0]
    827c:	60fb      	str	r3, [r7, #12]
	switch (svc_number)
    827e:	68fb      	ldr	r3, [r7, #12]
    8280:	b103      	cbz	r3, 8284 <SVC_Handler_Main+0x1e>
	{
		case 0:
		print_in_s_handler((char *)svc_args[0]);
		break;
		default:
		break;
    8282:	e008      	b.n	8296 <SVC_Handler_Main+0x30>
		print_in_s_handler((char *)svc_args[0]);
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	681b      	ldr	r3, [r3, #0]
    8288:	0018      	movs	r0, r3
    828a:	f248 23af 	movw	r3, #33455	; 0x82af
    828e:	f2c0 0300 	movt	r3, #0
    8292:	4798      	blx	r3
		break;
    8294:	46c0      	nop			; (mov r8, r8)
	}
}
    8296:	46c0      	nop			; (mov r8, r8)
    8298:	46bd      	mov	sp, r7
    829a:	b004      	add	sp, #16
    829c:	bd80      	pop	{r7, pc}

0000829e <SVCall_Handler>:

void SVC_Handler(void)
{
    829e:	b580      	push	{r7, lr}
    82a0:	af00      	add	r7, sp, #0
	__asm volatile(
    82a2:	4670      	mov	r0, lr
    82a4:	4669      	mov	r1, sp
    82a6:	e7de      	b.n	8266 <SVC_Handler_Main>
	  "ITE    EQ;               "
	  "MRSEQ  R0, MSP;          "
	  "MRSNE  R0, PSP;          "
	  "MOV    R1, LR;           "
	  "B      SVC_Handler_Main;  ");*/
}
    82a8:	46c0      	nop			; (mov r8, r8)
    82aa:	46bd      	mov	sp, r7
    82ac:	bd80      	pop	{r7, pc}

000082ae <print_in_s_handler>:

void print_in_s_handler(char* content)
{
    82ae:	b580      	push	{r7, lr}
    82b0:	b082      	sub	sp, #8
    82b2:	af00      	add	r7, sp, #0
    82b4:	6078      	str	r0, [r7, #4]
	print_nsc(content);
    82b6:	687b      	ldr	r3, [r7, #4]
    82b8:	0018      	movs	r0, r3
    82ba:	f647 4311 	movw	r3, #31761	; 0x7c11
    82be:	f2c0 0300 	movt	r3, #0
    82c2:	4798      	blx	r3
}
    82c4:	46c0      	nop			; (mov r8, r8)
    82c6:	46bd      	mov	sp, r7
    82c8:	b002      	add	sp, #8
    82ca:	bd80      	pop	{r7, pc}

000082cc <print_in_s_ns>:

void print_in_s_ns(char* user_str)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	b082      	sub	sp, #8
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
	__asm volatile (
    82d4:	9800      	ldr	r0, [sp, #0]
    82d6:	df00      	svc	0
		"ldr r0, [sp, #0];"
		"svc #0;"
	);
}
    82d8:	46c0      	nop			; (mov r8, r8)
    82da:	46bd      	mov	sp, r7
    82dc:	b002      	add	sp, #8
    82de:	bd80      	pop	{r7, pc}

000082e0 <ret2nw_ns>:

void ret2nw_ns()
{
    82e0:	b580      	push	{r7, lr}
    82e2:	af00      	add	r7, sp, #0
	DROP_NS_PRIVILEGES;
    82e4:	2301      	movs	r3, #1
    82e6:	f383 8814 	msr	CONTROL, r3
	print_in_s_ns(user_input);
    82ea:	f242 0300 	movw	r3, #8192	; 0x2000
    82ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f2:	0018      	movs	r0, r3
    82f4:	f248 23cd 	movw	r3, #33485	; 0x82cd
    82f8:	f2c0 0300 	movt	r3, #0
    82fc:	4798      	blx	r3
    82fe:	46c0      	nop			; (mov r8, r8)
    8300:	46bd      	mov	sp, r7
    8302:	bd80      	pop	{r7, pc}

00008304 <__libc_init_array>:
    8304:	b570      	push	{r4, r5, r6, lr}
    8306:	2500      	movs	r5, #0
    8308:	4b0e      	ldr	r3, [pc, #56]	; (8344 <__libc_init_array+0x40>)
    830a:	4c0f      	ldr	r4, [pc, #60]	; (8348 <__libc_init_array+0x44>)
    830c:	1ae4      	subs	r4, r4, r3
    830e:	10a4      	asrs	r4, r4, #2
    8310:	42a5      	cmp	r5, r4
    8312:	d109      	bne.n	8328 <__libc_init_array+0x24>
    8314:	2500      	movs	r5, #0
    8316:	f000 f81d 	bl	8354 <_init>
    831a:	4c0c      	ldr	r4, [pc, #48]	; (834c <__libc_init_array+0x48>)
    831c:	4b0c      	ldr	r3, [pc, #48]	; (8350 <__libc_init_array+0x4c>)
    831e:	1ae4      	subs	r4, r4, r3
    8320:	10a4      	asrs	r4, r4, #2
    8322:	42a5      	cmp	r5, r4
    8324:	d107      	bne.n	8336 <__libc_init_array+0x32>
    8326:	bd70      	pop	{r4, r5, r6, pc}
    8328:	4a06      	ldr	r2, [pc, #24]	; (8344 <__libc_init_array+0x40>)
    832a:	00ab      	lsls	r3, r5, #2
    832c:	189b      	adds	r3, r3, r2
    832e:	681b      	ldr	r3, [r3, #0]
    8330:	4798      	blx	r3
    8332:	3501      	adds	r5, #1
    8334:	e7ec      	b.n	8310 <__libc_init_array+0xc>
    8336:	4a06      	ldr	r2, [pc, #24]	; (8350 <__libc_init_array+0x4c>)
    8338:	00ab      	lsls	r3, r5, #2
    833a:	189b      	adds	r3, r3, r2
    833c:	681b      	ldr	r3, [r3, #0]
    833e:	4798      	blx	r3
    8340:	3501      	adds	r5, #1
    8342:	e7ee      	b.n	8322 <__libc_init_array+0x1e>
    8344:	00008360 	.word	0x00008360
    8348:	00008360 	.word	0x00008360
    834c:	00008364 	.word	0x00008364
    8350:	00008360 	.word	0x00008360

00008354 <_init>:
    8354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	bcf8      	pop	{r3, r4, r5, r6, r7}
    835a:	bc08      	pop	{r3}
    835c:	469e      	mov	lr, r3
    835e:	4770      	bx	lr

00008360 <__init_array_start>:
    8360:	00008121 	.word	0x00008121

00008364 <_fini>:
    8364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8366:	46c0      	nop			; (mov r8, r8)
    8368:	bcf8      	pop	{r3, r4, r5, r6, r7}
    836a:	bc08      	pop	{r3}
    836c:	469e      	mov	lr, r3
    836e:	4770      	bx	lr

00008370 <__fini_array_start>:
    8370:	000080f5 	.word	0x000080f5
